---
import type { HTMLTag, Polymorphic } from 'astro/types'

interface GridSpan {
  base: number
  sm?: number
  md?: number
  lg?: number
  xl?: number
}

type Props<Tag extends HTMLTag> = {
  as: Tag
  class?: string
  empty?: boolean
  rows?: GridSpan | number
  cols?: GridSpan | number
} & Polymorphic<{ as: Tag }>

const {
  class: customStyle,
  as: Element = 'section',
  empty,
  rows = 1,
  cols = 1,
  ...props
} = Astro.props

const row: GridSpan = typeof rows === 'number' ? { base: rows } : rows
const col: GridSpan = typeof cols === 'number' ? { base: cols } : cols

const twGridVariants = {
  base: {
    row: [
      'row-span-0',
      'row-span-1',
      'row-span-2',
      'row-span-3',
      'row-span-4',
      'row-span-5',
      'row-span-6',
    ],
    col: [
      'col-span-0',
      'col-span-1',
      'col-span-2',
      'col-span-3',
      'col-span-4',
      'col-span-5',
      'col-span-6',
      'col-span-7',
      'col-span-8',
      'col-span-9',
      'col-span-10',
    ],
  },
  sm: {
    row: [
      'sm:row-span-0',
      'sm:row-span-1',
      'sm:row-span-2',
      'sm:row-span-3',
      'sm:row-span-4',
      'sm:row-span-5',
      'sm:row-span-6',
    ],
    col: [
      'sm:col-span-0',
      'sm:col-span-1',
      'sm:col-span-2',
      'sm:col-span-3',
      'sm:col-span-4',
      'sm:col-span-5',
      'sm:col-span-6',
      'sm:col-span-7',
      'sm:col-span-8',
      'sm:col-span-9',
      'sm:col-span-10',
    ],
  },
  md: {
    row: [
      'md:row-span-0',
      'md:row-span-1',
      'md:row-span-2',
      'md:row-span-3',
      'md:row-span-4',
      'md:row-span-5',
      'md:row-span-6',
    ],
    col: [
      'md:col-span-0',
      'md:col-span-1',
      'md:col-span-2',
      'md:col-span-3',
      'md:col-span-4',
      'md:col-span-5',
      'md:col-span-6',
      'md:col-span-7',
      'md:col-span-8',
      'md:col-span-9',
      'md:col-span-10',
    ],
  },
  lg: {
    row: [
      'lg:row-span-0',
      'lg:row-span-1',
      'lg:row-span-2',
      'lg:row-span-3',
      'lg:row-span-4',
      'lg:row-span-5',
      'lg:row-span-6',
    ],
    col: [
      'lg:col-span-0',
      'lg:col-span-1',
      'lg:col-span-2',
      'lg:col-span-3',
      'lg:col-span-4',
      'lg:col-span-5',
      'lg:col-span-6',
      'lg:col-span-7',
      'lg:col-span-8',
      'lg:col-span-9',
      'lg:col-span-10',
    ],
  },
  xl: {
    row: [
      'xl:row-span-0',
      'xl:row-span-1',
      'xl:row-span-2',
      'xl:row-span-3',
      'xl:row-span-4',
      'xl:row-span-5',
      'xl:row-span-6',
    ],
    col: [
      'xl:col-span-0',
      'xl:col-span-1',
      'xl:col-span-2',
      'xl:col-span-3',
      'xl:col-span-4',
      'xl:col-span-5',
      'xl:col-span-6',
      'xl:col-span-7',
      'xl:col-span-8',
      'xl:col-span-9',
      'xl:col-span-10',
    ],
  },
}

function generateClasses(
  variants: typeof twGridVariants,
  search: {
    row?: GridSpan
    col?: GridSpan
  }
): string {
  const [[span, property]] = Object.entries(search)

  return Object.entries(property)
    .map(([breakpoint, value]) => {
      return variants[breakpoint as keyof GridSpan][span as 'row' | 'col'][
        value
      ]
    })
    .join(' ')
}

const rowClasses = generateClasses(twGridVariants, { row })
const colClasses = generateClasses(twGridVariants, { col })
---

<Element
  class:list={[
    empty ? 'hidden sm:block' : '',
    rowClasses,
    colClasses,
    customStyle,
    'w-full h-full rounded-2xl sm:rounded-3xl flex items-center justify-center transition-all duration-300',
  ]}
  {...props}>
  <slot />
</Element>
